{"version":3,"sources":["Factory/MakeStoreFactory.tsx","Factory/stores.tsx","Components/Rectangle/rect.tsx","Components/Circle/circ.tsx","Factory/MakeStoreFactoryV2.tsx","Factory/storesv2.tsx","Components/RectangleUseV2/rect.tsx","ComponentsRepos/AppComponents.ts","Factory/BaseComponentFactory.tsx","Services/jsonfile.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["context","React","createContext","Provider","props","useState","InitialValue","state","setState","contextValueProps","useMemo","value","children","useStore","useContext","makeStore","Rect","console","log","width","height","id","RecState","x","y","className","RECTExposer","this","properties","Circ","cx","cy","r","CIRCExposer","actions","boundActions","Object","keys","forEach","key","args","old","immer","draft","makeStorev2","increment","valueparam","RecState2","decrement","count","Rectv2","_","onClick","AppComponents","myrectcomp","funcircle","rectv2","Makeblock","block","JSON","stringify","component","createElement","jsonfile","dashboard","fragment","App","data","setData","map","b","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e72256a.chunk.js","sourcesContent":["import React, { useContext, useMemo, useState } from \"react\";\r\nexport function makeStore() {\r\n    const context = React.createContext({});\r\n    const Provider = (props: any) => {\r\n        const [state, setState] = useState(props.InitialValue);\r\n\r\n        const contextValueProps = useMemo(() => [state, setState], [state]);\r\n        return (\r\n\r\n            <context.Provider value={contextValueProps}>\r\n\r\n                {props.children}\r\n\r\n            </context.Provider>);\r\n    };\r\n    const useStore = () => useContext(context);\r\n    return { Provider, useStore };\r\n}\r\n","import { makeStore } from \"./MakeStoreFactory\";\r\n\r\n\r\nconst { Provider, useStore } = makeStore();\r\n\r\n\r\n export {\r\n     Provider,\r\n     useStore\r\n }\r\n","import React from \"react\";\r\nimport { Provider, useStore } from \"../../Factory/stores\";\r\nimport { IRectState } from \"./IStates\";\r\nimport  \"./style.css\"\r\nimport { IRectProps } from \"../Circle/IProps\";\r\nimport { JsonDecoder } from 'ts.data.json';\r\nimport { serialize, deserialize } from \"v8\";\r\n\r\n// Componenets expose State to provider\r\nconst RECTExposer = (props) => {\r\n     \r\n console.log(\"this  1 \",props.this.properties) ;\r\n//Init state as this.state\r\n\r\n//Cast Properties \r\n\r\n\r\nconst castedProperties = \"\";\r\nconsole.log(\"casted porp \", castedProperties)\r\n\r\nconst RecState:IRectState = {\r\n    width:\"100\",\r\n    height:\"100\"\r\n};\r\n\r\n//Old props passed to component is porps directly\r\n    return (\r\n        <>\r\n            <Provider InitialValue={{ RecState }}>\r\n                <Rect {...props}></Rect>\r\n            </Provider>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n// connect(state=>({propName:state.prop}),{function1, function2})(bindToComponenets)\r\nconst Rect = (props) => {\r\n    console.log(\"props 2 \",props) ;\r\n    //IStates{ width:\"120\"}\r\n    const [state] = useStore() as any[];\r\n    console.log(\"state\",state);\r\n    return (\r\n        <>\r\n         <div>\r\n            <h1>it is a rect </h1>\r\n            <svg width=\"100\" height=\"200\"  id=\"svg\">\r\n                <rect width={state.RecState.width} height={state.RecState.height} x=\"50\" y=\"20\" className=\"bshape\" />\r\n            </svg>\r\n            <button>reset</button>\r\n            <button>incriment width</button>\r\n            <button>incriment height</button>\r\n            <button>Set Color</button>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default RECTExposer;","import React from \"react\";\r\nimport { Provider, useStore } from \"../../Factory/stores\";\r\nimport { IRectState } from \"./IStates\";\r\n\r\n\r\n// Componenets expose State to provider\r\nconst CIRCExposer = (props) => {\r\n    \r\n console.log(\"this  1 \",this) ;\r\n//Init state as this.state\r\nconst RecState:IRectState = {\r\n    width:\"\",\r\n    height:\"\"\r\n};\r\n\r\n    return (\r\n        <>\r\n            <Provider InitialValue={{ RecState }}>\r\n                <Circ {...props}></Circ>\r\n            </Provider>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst Circ = (props) => {\r\n    console.log(\"props 2 \",props) ;\r\n    //IStates{ width:\"120\"}\r\n    const [state, setState] = useStore() as any[];\r\n    console.log(\"state\",state);\r\n    return (\r\n        <>\r\n           <div>\r\n            <h1>it is a circle </h1>\r\n            <svg width=\"100\" height=\"200\"  id=\"svg2\">\r\n                <circle cx=\"50\" cy=\"50\" r=\"50\"  className=\"gshape\"/>\r\n            </svg>\r\n            <button>reset</button>\r\n            <button>change Config</button>\r\n            <button>Set Color</button>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default CIRCExposer;","import React, { useContext, useMemo, useState } from \"react\";\r\nimport immer from \"immer\";\r\nexport function makeStorev2({actions }) {\r\n    const context = React.createContext({});\r\n    const Provider = (props: any) => {\r\n        const [state, setState] = useState(props.InitialValue);\r\n\r\n        const boundActions = {}\r\n        Object.keys(actions).forEach(key => {\r\n          boundActions[key] = (...args) => setState(old => immer(old, draft => actions[key](draft, ...args)))\r\n        })\r\n\r\n        const contextValueProps = useMemo(() => [state, boundActions], [state]);\r\n        return (\r\n\r\n            <context.Provider value={contextValueProps}>\r\n\r\n                {props.children}\r\n\r\n            </context.Provider>);\r\n    };\r\n    const useStore = () => useContext(context);\r\n    return { Provider, useStore };\r\n}\r\n","\r\nimport { makeStorev2 } from \"./MakeStoreFactoryV2\";\r\n\r\n\r\nconst { Provider, useStore } = makeStorev2({\r\n  \r\n    \r\n\r\n    actions: {\r\n      increment: (state,valueparam) => {console.log(`display ${valueparam}`);console.log(\"decrement****\",state.RecState2.width); state.RecState2.width = state.RecState2.width + \"30\" },\r\n      decrement: (state) => {console.log(\"decrement nothings\")},\r\n      count:(state)=> {return state}\r\n    }\r\n  })\r\n\r\n export {\r\n     Provider,\r\n     useStore\r\n }\r\n","import React from \"react\";\r\nimport { Provider, useStore } from \"../../Factory/storesv2\";\r\nimport { IRectState } from \"./IStates\";\r\nimport  \"./style.css\"\r\nimport { IRectProps } from \"../Circle/IProps\";\r\nimport { JsonDecoder } from 'ts.data.json';\r\nimport { serialize, deserialize } from \"v8\";\r\n\r\n\r\n\r\n\r\n\r\n// Componenets expose State to provider\r\nconst RECTv2Exposer = (props) => {\r\n     \r\n console.log(\"this  1 \",props.this.properties) ;\r\n//Init state as this.state\r\n\r\n//Cast Properties \r\n\r\n\r\nconst castedProperties = \"\";\r\nconsole.log(\"casted porp \", castedProperties)\r\n\r\nconst RecState2:IRectState = {\r\n    width:\"100\",\r\n    height:\"100\"\r\n};\r\n\r\n//Old props passed to component is porps directly\r\n    return (\r\n        <>\r\n            <Provider InitialValue={{ RecState2 }}>\r\n                <Rectv2 {...props}></Rectv2>\r\n            </Provider>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n// connect(state=>({propName:state.prop}),{function1, function2})(bindToComponenets)\r\nconst Rectv2 = (props,{}) => {\r\n    console.log(\"props 2 \",props) ;\r\n    //IStates{ width:\"120\"}\r\n   \r\n    const [_,  {increment} ] = useStore() as any[];\r\n  \r\n    console.log(\"useStore\",_)\r\n    return (\r\n        <>\r\n         <div>\r\n            <h1>it is a rect </h1>\r\n            <svg width=\"100\" height=\"200\"  id=\"svg\">\r\n                <rect width=\"50\" height=\"50\" x=\"50\" y=\"20\" className=\"bshape\" />\r\n            </svg>\r\n            {_.RecState2.width}\r\n            <button>reset</button>\r\n            <button onClick={() => {increment(2)}}>incriment width</button>\r\n            <button>incriment height</button>\r\n            <button>Set Color</button>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default RECTv2Exposer;","import RECTExposer from \"../Components/Rectangle/rect\";\r\nimport CIRCExposer from \"../Components/Circle/circ\";\r\nimport RECTv2Exposer from \"../Components/RectangleUseV2/rect\";\r\n\r\n\r\nexport const AppComponents = {\r\n    myrectcomp:RECTExposer,\r\n    funcircle:CIRCExposer,\r\n    rectv2:RECTv2Exposer\r\n  };","import React from \"react\";\r\nimport { AppComponents } from \"../ComponentsRepos/AppComponents\";\r\n\r\n\r\n// make this in other files\r\n\r\nexport const Makeblock = (block: any) => {\r\n  console.log(\"block log :\", JSON.stringify(block));\r\n\r\n  if (typeof AppComponents[block.component] !== \"undefined\") {\r\n    return React.createElement(AppComponents[block.component], {\r\n      key: block.id,\r\n      this: block\r\n    });\r\n  }\r\n  return React.createElement(\r\n    () => <div>The component {block.component} has not been created yet.</div>,\r\n    { key: block.id }\r\n  );\r\n};\r\n","// mok data\r\n\r\nexport const jsonfile = {\r\n    dashboard: {\r\n      fragment: [\r\n        {\r\n            id: \"001\",\r\n            component: \"myrectcomp\",\r\n            properties: \" {width: '50', height: '50' , color: 'red'}\"\r\n        },\r\n        {\r\n          id: \"002\",\r\n          component: \"funcircle\",\r\n          properties: \"funcircle\"\r\n      },\r\n      {\r\n        id: \"003\",\r\n        component: \"rectv2\",\r\n        properties: \"funcircle\"\r\n    },\r\n    {\r\n      id: \"004\",\r\n      component: \"undifined\",\r\n      properties: \"funcircle\"\r\n  }\r\n      ]\r\n    }\r\n  };","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Makeblock } from './Factory/BaseComponentFactory';\nimport { jsonfile } from './Services/jsonfile';\n\n\n\nconst App = () => {\n  \nfunction  _addComponenets1(){\n  setData(1);\n}\nfunction  _addComponenets2(){\n  setData(2);\n}\nfunction  _removeComponenets(){\n  setData(3);\n}\n  const [data, setData] = useState<number>(0);\n  \n  return (\n    // Provide the store to the app\n    <div className=\"App\">\n      <header className=\"\">\n   \n      {jsonfile.dashboard.fragment.map(b =>Makeblock(b))}\n   \n     </header>\n     Add Componenets\n     <div>\n       <button onClick={()=>_addComponenets1()}>cmp1</button>\n       <button onClick={()=>_addComponenets2()}>cmp2</button>\n       <button onClick={()=>_removeComponenets()}>remove</button>\n     </div>\n<div>\n{Makeblock(jsonfile.dashboard.fragment[data])}\n</div>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}